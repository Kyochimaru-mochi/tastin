type User @model
@auth(rules: [
  { allow: owner, operations: [create, read, update, delete] },
  { allow: groups, groups: ["admin"], operations: [read, update, delete] }
]) {
  id: ID!
  username: String!
  email: String!
  subscription: String!
  settings: AWSJSON
  teamBoardMembers: [TeamBoardMember] @hasMany(indexName: "byUser", fields: ["id"])
  assignedTasks: [Task] @hasMany(indexName: "byUser", fields: ["id"]) 
  completedTasks: [CompletedTask] @hasMany(fields: ["id"])
  comments: [Comment] @hasMany(fields: ["id"])
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type TeamBoard @model
@auth(rules: [
  { allow: groups, groups: ["admin"], operations: [create, read, update, delete] },
  { allow: groups, groups: ["task_manager"], operations: [read, update] },
  { allow: groups, groups: ["user"], operations: [read] }
]) {
  id: ID!
  name: String!
  description: String
  ownerId: ID!
  members: [TeamBoardMember] @hasMany(indexName: "byTeamBoard", fields: ["id"])
  kanbans: [Kanban] @hasMany(indexName: "byTeamBoard", fields: ["id"])
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type TeamBoardMember @model
  @auth(rules: [
    { allow: groups, groups: ["admin"], operations: [create, read, update, delete] },
    { allow: groups, groups: ["task_manager", "user"], operations: [read] }
  ]) {
  id: ID!
  teamBoardId: ID! @index(name: "byTeamBoard")
  teamBoard: TeamBoard @belongsTo(fields: ["teamBoardId"])
  userId: ID! @index(name: "byUser")
  user: User @belongsTo(fields: ["userId"])
  role: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Kanban @model
  @auth(rules: [
    { allow: groups, groups: ["admin", "task_manager"], operations: [create, read, update, delete] },
    { allow: groups, groups: ["user"], operations: [read] }
  ]) {
  id: ID!
  teamBoardId: ID! @index(name: "byTeamBoard")
  teamBoard: TeamBoard @belongsTo(fields: ["teamBoardId"])
  name: String!
  type: String!
  resetPeriod: String
  order: Int!
  tasks: [Task] @hasMany(indexName: "byKanban", fields: ["id"])
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Task @model
  @auth(rules: [
    { allow: groups, groups: ["admin", "task_manager"], operations: [create, read, update, delete] },
    { allow: groups, groups: ["user"], operations: [read, update] }
  ]) {
  id: ID!
  kanbanId: ID! @index(name: "byKanban")
  kanban: Kanban @belongsTo(fields: ["kanbanId"])
  content: String!
  dueDate: AWSDateTime
  assignedUserId: ID @index(name: "byUser")
  assignedUser: User @belongsTo(fields: ["assignedUserId"])
  completed: Boolean!
  memos: [TaskMemo] @hasMany(indexName: "byTask", fields: ["id"])
  createdBy: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type CompletedTask @model
  @auth(rules: [
    { allow: groups, groups: ["admin", "task_manager"], operations: [create, read, delete] },
    { allow: groups, groups: ["user"], operations: [create, read] }
  ]) {
  id: ID!
  originalTaskId: ID!
  kanbanId: ID!
  teamBoardId: ID!
  content: String!
  completedBy: ID!
  completedUser: User @belongsTo(fields: ["completedBy"])
  comments: [Comment] @hasMany(indexName: "byCompletedTask", fields: ["id"])
  completedAt: AWSDateTime!
  createdAt: AWSDateTime!
}

type IncompletedTask @model
  @auth(rules: [
    { allow: groups, groups: ["admin", "task_manager"], operations: [create, read, delete] },
    { allow: groups, groups: ["user"], operations: [read] }
  ]) {
  id: ID!
  originalTaskId: ID!
  kanbanId: ID!
  teamBoardId: ID!
  content: String!
  dueDate: AWSDateTime
  missedAt: AWSDateTime!
  createdAt: AWSDateTime!
}

type Comment @model
  @auth(rules: [
    { allow: owner, operations: [create, read, update, delete] },
    { allow: groups, groups: ["admin", "task_manager", "user"], operations: [read] }
  ]) {
  id: ID!
  completedTaskId: ID! @index(name: "byCompletedTask")
  completedTask: CompletedTask @belongsTo(fields: ["completedTaskId"])
  userId: ID!
  user: User @belongsTo(fields: ["userId"])
  content: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type TaskMemo @model
  @auth(rules: [
    { allow: owner, operations: [create, read, update, delete] },
    { allow: groups, groups: ["admin", "task_manager", "user"], operations: [read] }
  ]) {
  id: ID!
  taskId: ID! @index(name: "byTask")
  task: Task @belongsTo(fields: ["taskId"])
  content: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}